// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/26/2019 22:21:48"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          QPSKcodedecode
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module QPSKcodedecode_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] ast_sink_error;
reg clk;
reg en;
reg reset_n;
reg rst;
reg sel;
// wires                                               
wire [34:0] FIR1;
wire [34:0] FIR2;
wire [23:0] LPM1;
wire [23:0] LPM2;
wire data_0;
wire data_1;
wire data_in;
wire data_out;
wire [11:0] fcos_out;
wire [11:0] fsin_o;
wire [11:0] fsin_out;

// assign statements (if any)                          
QPSKcodedecode i1 (
// port map - connection between master ports and signals/registers   
	.FIR1(FIR1),
	.FIR2(FIR2),
	.LPM1(LPM1),
	.LPM2(LPM2),
	.ast_sink_error(ast_sink_error),
	.clk(clk),
	.data_0(data_0),
	.data_1(data_1),
	.data_in(data_in),
	.data_out(data_out),
	.en(en),
	.fcos_out(fcos_out),
	.fsin_o(fsin_o),
	.fsin_out(fsin_out),
	.reset_n(reset_n),
	.rst(rst),
	.sel(sel)
);
initial 
begin 
#1000000 $finish;
end 
// ast_sink_error[ 1 ]
initial
begin
	ast_sink_error[1] = 1'b0;
end 
// ast_sink_error[ 0 ]
initial
begin
	ast_sink_error[0] = 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2000 1'b1;
	#2000;
end 

// en
initial
begin
	en = 1'b1;
end 

// reset_n
initial
begin
	reset_n = 1'b1;
end 

// rst
initial
begin
	rst = 1'b1;
end 

// sel
initial
begin
	sel = 1'b0;
end 
endmodule

