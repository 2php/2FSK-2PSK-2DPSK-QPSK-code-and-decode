module Controller(
			clk,
			reset_n,
         dataoutm, 
			address,
			//address_data1,
			clk_DA,
			blank_DA_n,
			sync_DA_n
);

	input            clk         ;
	input            reset_n     ;
	input            dataoutm    ;
	output  [7:0] address ;
	//output  address_data1;
	output           clk_DA      ; 
	output           sync_DA_n   ; 
	output           blank_DA_n  ; 
	reg    [ 32 : 0 ] address_data1;
	reg    [ 32 : 0 ] address_data2;
	reg    [ 32 : 0 ] address_data;
	always @( posedge clk or negedge reset_n )
	begin
     if(!reset_n)          
     begin
       address_data1<=32'b0111_1111_1111_1111_1111_1111_1111_1111;//000_0000;//定义初值相位
       address_data2<=32'b0;//111_0011;//定义初值0
	  end
	  else                 
	  begin
       address_data1<=address_data1+32'b1;//地址依次加一
		 address_data2<=address_data2+32'b1;
	  end
	end

	always @( posedge clk or negedge reset_n )
	begin
     if(!reset_n)         
       address_data<=32'b0;//赋初值
	  else if(!dataoutm)                
       address_data<=address_data2;//如果m序列输出为0，则为address_data2值
	  else if(dataoutm)
		 address_data<=address_data1;
	  else
		;
	end
	
   assign address    = address_data[32:25];
	assign clk_DA     = clk;
	assign blank_DA_n = 1'b1;
	assign sync_DA_n  = 1'b1;
endmodule
